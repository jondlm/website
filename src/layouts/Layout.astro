---
import { Image } from "astro:assets";
import home from "../images/home_handwritten.svg";

interface Props {
  title: string;
  small?: boolean;
}

const { title, small } = Astro.props;
const containerClass = `${small ? "px-4 md:px-16 lg:px-32 xl:px-64 2xl:px-96" : "px-4"} container mx-auto`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Jon's personal site." />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/website/favicon.svg?v=2" />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Chez Jon"
      href={new URL("rss.xml", Astro.site)}
    />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class={`${containerClass} pb-2`}>
    <div id="sentinal" class="h-6"></div>
    <div
      id="nav-stripe"
      class="print:hidden bg-slate-900 top-0 right-full left-0 w-full fixed opacity-0"
    >
    </div>
    <nav
      id="navbar"
      class="print:hidden flex mb-8 px-2 pr-5 py-2 bg-slate-900 rounded-lg border border-slate-900"
    >
      <div class="flex-auto flex items-center">
        <a href="/website">
          <Image width="65" alt="home" loading="eager" src={home} />
        </a>
      </div>
      <div class="flex flex-auto items-center justify-end space-x-4">
        <a class="text-slate-100" href="/website/values">values</a>
        <a class="text-slate-100" href="/website/blog">blog</a>
        <a class="text-slate-100" href="/website/til">TIL</a>
        <a class="text-slate-100" href="/website/resume">resume</a>
      </div>
    </nav>
    <slot />
  </body>
</html>
<style is:global>
  /* -------------------------------------------------------------------------- */
  /* Globals                                                                    */
  /* -------------------------------------------------------------------------- */

  a {
    @apply text-blue-500;
  }

  a:hover {
    text-decoration: underline;
  }

  a,
  a:visited,
  a:focus,
  a:active {
    text-decoration: none;
  }

  /* ----------------------------------- */
  /* Markdown posts                      */
  /* ----------------------------------- */

  .md h1 {
    @apply text-4xl md:text-6xl;
  }

  .md h2 {
    @apply text-3xl md:text-5xl my-6;
  }

  .md h3 {
    @apply text-2xl md:text-4xl my-5;
  }

  .md h4 {
    @apply text-xl md:text-3xl my-4;
  }

  .md p {
    @apply my-4;
  }

  .md blockquote {
    @apply italic mb-4 pl-2 border-l-2 border-l-indigo-500;
  }

  .md ul {
    @apply list-disc pl-4;
  }

  .md ol {
    @apply list-decimal pl-7;
  }

  .md .astro-code {
    @apply rounded p-2 text-sm;
    border-top-right-radius: unset;
  }

  /* Tables */
  .md table {
    @apply w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400;
  }
  .md thead {
    @apply rounded rounded-t text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400;
  }
  .md th,
  .md td {
    @apply px-6 py-2;
  }
  .md tbody > tr {
    @apply bg-white border-b dark:bg-gray-800 dark:border-gray-700;
  }

  /* Code */
  .md p > code,
  .md td > code,
  .md li > code {
    @apply bg-gray-200 px-1 rounded;
  }
</style>

<script>
  // -----------------------------------------------
  // Language badge & copy to clipboard
  // -----------------------------------------------
  const codeBlocks = document.querySelectorAll("[data-language]");
  const clipboardSvg = `
<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 500 500" width="16" height="15" style="display:inline-block;vertical-align:bottom">
    <rect width="266" height="318" x="117" y="91" stroke="#000" stroke-width="40" fill="none" rx="40"/>
    <rect width="132" height="76.56" x="184" y="53" stroke="#fff" stroke-width="40" rx="21"/>
    <rect width="100" height="58" x="200" y="62" stroke="#000" stroke-width="32" fill="#fff" rx="21"/>
    <path stroke="#000" stroke-linecap="round" stroke-width="40" d="M176 183h151m-153 74h151m-151 74h151"/>
</svg>`;
  const langStyle = `border: 1px solid #aab0b7; border-bottom: none; transition: all 0.4s;`;

  async function setClipboard(text: string) {
    const type = "text/plain";
    const blob = new Blob([text], { type });
    const data = [new ClipboardItem({ [type]: blob })];
    await navigator.clipboard.write(data);
  }

  Array.from(codeBlocks).forEach((block) => {
    if (!(block instanceof HTMLElement)) return;

    const codeTab = document.createElement("div");
    const lang = document.createElement("button");

    lang.innerHTML = `${block.dataset.language} ${clipboardSvg}`;
    lang.classList.add("p-0.5", "px-1", "rounded-t");
    lang.setAttribute("style", langStyle);

    codeTab.classList.add("text-xs", "-mt-4");
    codeTab.setAttribute("style", "display: flex; justify-content: flex-end;");

    codeTab.appendChild(lang);

    if (block.parentElement != null) {
      block.parentElement.insertBefore(codeTab, block);
    }

    // Success/fail button flash
    lang.addEventListener("click", async () => {
      let success = true;

      try {
        await setClipboard((block.textContent ?? "").trim());
      } catch (e) {
        console.error(e);
        success = false;
      }

      lang.setAttribute(
        "style",
        `${langStyle} background-color: ${success ? "#dcfce7" : "#fee2e2"} ;`,
      );
      setTimeout(() => {
        lang.setAttribute("style", langStyle);
      }, 800);
    });
  });
</script>
